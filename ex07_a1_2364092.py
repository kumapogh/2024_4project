# -*- coding: utf-8 -*-
"""ex07_a1_2364092

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LCNLv0VI3Um3Kdcmj4xpG4tP21-uqM23
"""

import csv
looktime = 0
swich = 0

class Item:
  def __init__ (self, number:int, name:str, score:int):
   self.number = number
   self.name = name
   self.score = score

def aditem(item_list,number:int,name:str,score:int):
  item_list.append(Item(number,name,score))

def csvreader(filename:str, item_list):
  with open(filename,'r') as f:
    csvr = csv.reader(f)
    next(csvr)
    for row in csvr:
      number = int(row[0])
      name = str(row[1])
      score = int(row[2])
      aditem(item_list, number, name, score)

def outout(item_list,newfile):
  global looktime,swich
  alist = mergesort(item_list)
  f = open(newfile,"w")
  for item in alist:
    f.write(f"{item.number:4},{item.name:16},{item.score}\n")

  print("比較回数:"+str(looktime)+"入れ替え回数："+str(swich))

def mergesort(a:list):
    global looktime,swich
    N = len(a)
    t = [[[Item(None,None,None) for i in range(N)] for j in range(2)] for k in range(2)]
    sd = (0, 1) #入力および出力の配列のインデクス
    t[sd[0]][0][:(N//2)], t[sd[0]][1][:(N//2)] = a[:(N//2)], a[(N//2):] #初期データを分割
    l = [[0 for i in range(2)] for j in range(2)] #各配列中にあるデータ数
    l[0][0],l[0][1] = (N//2), (N-(N//2))



    p = 1 #一度にマージする項目数
    while True:
        i = j = dt =0 # i,jは次に考慮すべき項目
        while True:
            if l[sd[0]][0] >= p:
                q = p # qはt[s][0][]からマージする項目数
            else:
                q = l[sd[0]][0]
            l[sd[0]][0] -= q
            if l[sd[0]][1] >= p:
                r = p # rはt[s][1][]からマージする項目数
            else:
                r = l[sd[0]][1]
            l[sd[0]][1] -= r

            k = l[sd[1]][dt] # kは出力列において書き込むべき位置
            # kは出力列において書き込むべき一を表す添え字
            # t[d][dt][k]から順に書いていく
            while (q != 0) and (r != 0):
                looktime += 1
                if t[sd[0]][0][i].score < t[sd[0]][1][j].score or (t[sd[0]][0][i].score == t[sd[0]][1][j].score and t[sd[0]][0][i].number < t[sd[0]][1][j].number): #小さい方を出力用にコピー
                    t[sd[1]][dt][k].score = t[sd[0]][0][i].score
                    t[sd[1]][dt][k].name = t[sd[0]][0][i].name
                    t[sd[1]][dt][k].number = t[sd[0]][0][i].number
                    swich += 1
                    i += 1
                    q -= 1
                else:
                    swich += 1
                    t[sd[1]][dt][k].score = t[sd[0]][1][j].score
                    t[sd[1]][dt][k].name = t[sd[0]][1][j].name
                    t[sd[1]][dt][k].number = t[sd[0]][1][j].number
                    j += 1
                    r -= 1
                k += 1


            while q != 0: #t[s][0][]にデータが残った場合，それをコピーする
                swich += 1
                t[sd[1]][dt][k].score = t[sd[0]][0][i].score
                t[sd[1]][dt][k].name = t[sd[0]][0][i].name
                t[sd[1]][dt][k].number = t[sd[0]][0][i].number
                i += 1
                q -= 1
                k += 1
            while r != 0:
                swich += 1
                t[sd[1]][dt][k].score = t[sd[0]][1][j].score
                t[sd[1]][dt][k].name = t[sd[0]][1][j].name
                t[sd[1]][dt][k].number = t[sd[0]][1][j].number
                j += 1
                r -= 1
                k += 1
            l[sd[1]][dt] = k #1回のマージ操作終了
            dt = abs(1-dt) #01切り替え
            if not ((l[sd[0]][0] > 0) or (l[sd[0]][1] > 0)):
                break

        sd = (sd[1], sd[0]) #入力配列と出力配列を入れ替え
        p = p * 2 #一度にマージする長さを倍に

        if p >= N: #終了条件
            break
    #マージ完了

    for i in range(N):
        a[i].score = t[(1-sd[1])][(1-dt)][i].score #最終的にt[!d][!dt][]に解が得られる
        a[i].name = t[(1-sd[1])][(1-dt)][i].name
        a[i].number = t[(1-sd[1])][(1-dt)][i].number
    return a

item_list = []
csvreader('data_8.csv', item_list)
outout(item_list,"outputnoad71_8.txt")

item_list = []
csvreader('data_288.csv', item_list)
outout(item_list,"outputnoad71_288.txt")

item_list = []
csvreader('data_2240.csv', item_list)
outout(item_list,"outputnoad71_2240.txt")
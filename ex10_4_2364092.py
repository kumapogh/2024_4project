# -*- coding: utf-8 -*-
"""ex10_4_2364092

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o7jQgCb6sue_qzAB8sygfxcdheM1hZxp
"""

from0 = [1, 2, -1]      #0地点から出ている道の先の地点
from1 = [0, 2, 3, 4, -1]#1地点から出ている道の先の地点
from2 = [0, 1, 3, -1]   #2地点から出ている道の先の地点
from3 = [1, 2, 4, -1]   #3地点から出ている道の先の地点
from4 = [1, 3, -1]      #4地点から出ている道の先の地点
roads = [from0, from1, from2, from3, from4] #道順を記録するファイル
def bfs(s,g):  #最短ルートを見つける関数
    way = [(s, [s])]  #(現在の地点, 経路)を変数wayに代入
    visited = [False] * len(roads)  #訪問済みの地点を記録するリスト
    visited[s] = True               #訪問済みの地点を記録
    front = 0                       #先頭位置を示す変数front
    while front < len(way):         #wayの長さ分
        a, path = way[front]        #2変数に道リストを代入
        front += 1                  #frontを1つずらす
        if a == g:                  #目的地に到達したら
            return path             #最短経路を返す
        for next in roads[a]:       #次の地点を探索
            if next == -1:          #ある地点からの候補の道がなくなったら
                break               #ループ終了
            if not visited[next]:   #まだ通ったことのない道の時
                visited[next] = True#道をリストに記録する
                way.append((next, path + [next]))  #最短距離リストに道を格納

result = bfs(0, 4)#0➟4の最短ルート関数を呼び出し
print(result)     #最短距離の結果出力
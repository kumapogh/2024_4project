# -*- coding: utf-8 -*-
"""ex09_1_2364092

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1px9RDPGi59pbrHSZVcxVU6cOcwp13Mig
"""

# 迷路データの定義
data = [
    [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
    [8, 1, 0, 0, 8, 8, 0, 0, 0, 8],
    [8, 0, 8, 0, 0, 0, 0, 8, 0, 8],
    [8, 0, 8, 8, 8, 0, 8, 8, 0, 8],
    [8, 0, 0, 8, 8, 0, 0, 8, 0, 8],
    [8, 8, 0, 0, 8, 0, 8, 8, 0, 8],
    [8, 0, 8, 0, 8, 0, 0, 8, 0, 8],
    [8, 0, 0, 0, 8, 8, 0, 0, 0, 8],
    [8, 8, 8, 0, 0, 0, 0, 8, 0, 8],
    [8, 8, 8, 8, 8, 8, 8, 8, 9, 8]
]

def output(m,data):
    for y in range(len(m)):
        for x in range(len(m[y])):
            if (y, x) in data:
                print("○", end="")
            elif m[y][x] == 8:
                print("■", end="")
            elif m[y][x] == 0:
                print("　", end="")
            elif m[y][x] in (1, 9):
                print("〇", end="")
        print()

def find_start_goal(m):
    start = goal = None
    for y in range(len(m)):
        for x in range(len(m[y])):
            if m[y][x] == 1:
                start = (y, x)
            elif m[y][x] == 9:
                goal = (y, x)
    return start, goal

def dfs(m,c,goal,path,paths):
    if c == goal:
        paths.append(path)
        return
    y, x = c
    for dy, dx in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
        ny =y + dy
        nx =x + dx
        if 0 <= ny < len(m) and 0 <= nx < len(m[0]) and m[ny][nx] in (0, 9) and (ny, nx) not in path:
            dfs(m, (ny, nx), goal, path + [(ny, nx)], paths)

def fin(m):
    start, goal = find_start_goal(m)
    paths = []
    dfs(m, start, goal, [start], paths)
    for path in paths:
        print(f"\n{len(path)-1}回で到着")
        output(m, path)

fin(data)